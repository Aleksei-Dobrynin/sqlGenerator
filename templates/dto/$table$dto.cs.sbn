using System;
using Newtonsoft.Json;
namespace WebApi.Dtos
{
    public class Get{{ entity_name }}Response
    {
{{~ for column in columns ~}}
        [JsonProperty("{{ column.Name }}")]
        {{~ if column.IsNullable && column.CSharpType != "string" ~}}
        public {{ column.CSharpType }}? {{ column.Name   }} { get; set; }
        {{~ else ~}}
        public {{ column.CSharpType }} {{ column.Name   }} { get; set; }
        {{~ end ~}}
{{~ end ~}}
        internal static Get{{ entity_name }}Response FromDomain(Domain.Entities.{{ entity_name }} domain)
        {
            return new Get{{ entity_name }}Response
            {
{{~ for column in columns ~}}
                {{ column.Name   }} = domain.{{ column.Name   }},
{{~ end ~}}
            };
        }
    }
    public class Create{{ entity_name }}Request
    {
{{~ for column in columns ~}}
        {{~ if column.Name != "id" && column.Name != "created_at" && column.Name != "updated_at" ~}}
        [JsonProperty("{{ column.Name }}")]
        {{~ if column.IsNullable && column.CSharpType != "string" ~}}
        public {{ column.CSharpType }}? {{ column.Name   }} { get; set; }
        {{~ else ~}}
        public {{ column.CSharpType }} {{ column.Name   }} { get; set; }
        {{~ end ~}}
        {{~ end ~}}
{{~ end ~}}
        internal Domain.Entities.{{ entity_name }} ToDomain()
        {
            return new Domain.Entities.{{ entity_name }}
            {
{{~ for column in columns ~}}
                {{~ if column.Name != "id" && column.Name != "created_at" && column.Name != "updated_at" ~}}
                {{ column.Name   }} = {{ column.Name   }},
                {{~ end ~}}
{{~ end ~}}
            };
        }
    }
    public class Update{{ entity_name }}Request
    {
        [JsonProperty("id")]
        public int Id { get; set; }
{{~ for column in columns ~}}
        {{~ if column.Name != "id" && column.Name != "created_at" ~}}
        [JsonProperty("{{ column.Name }}")]
        {{~ if column.IsNullable && column.CSharpType != "string" ~}}
        public {{ column.CSharpType }}? {{ column.Name   }} { get; set; }
        {{~ else ~}}
        public {{ column.CSharpType }} {{ column.Name   }} { get; set; }
        {{~ end ~}}
        {{~ end ~}}
{{~ end ~}}
        internal Domain.Entities.{{ entity_name }} ToDomain()
        {
            return new Domain.Entities.{{ entity_name }}
            {
                Id = Id,
{{~ for column in columns ~}}
                {{~ if column.Name != "id" && column.Name != "created_at" ~}}
                {{ column.Name   }} = {{ column.Name   }},
                {{~ end ~}}
{{~ end ~}}
            };
        }
    }
}