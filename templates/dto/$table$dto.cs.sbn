
using System;
using Newtonsoft.Json;
namespace WebApi.Dtos
{
    public class Get{{ entity_name }}Response
    {
{{~ for column in columns ~}}
        [JsonProperty("{{ column.name }}")]
        public {{ 
            if column.is_nullable and (column.type != "string") 
                column.type | map_type | append "?"
            else 
                column.type | map_type 
        }} {{ column.name | string.pascalcase }} { get; set; }
{{~ end ~}}
        internal static Get{{ entity_name }}Response FromDomain(Domain.Entities.{{ entity_name }} domain)
        {
            return new Get{{ entity_name }}Response
            {
{{~ for column in columns ~}}
                {{ column.name | string.pascalcase }} = domain.{{ column.name | string.pascalcase }},
{{~ end ~}}
            };
        }
    }
    public class Create{{ entity_name }}Request
    {
{{~ for column in columns ~}}
        {{~ if column.name != "id" and column.name != "created_at" and column.name != "updated_at" ~}}
        [JsonProperty("{{ column.name }}")]
        public {{ 
            if column.is_nullable and (column.type != "string") 
                column.type | map_type | append "?"
            else 
                column.type | map_type 
        }} {{ column.name | string.pascalcase }} { get; set; }
        {{~ end ~}}
{{~ end ~}}
        internal Domain.Entities.{{ entity_name }} ToDomain()
        {
            return new Domain.Entities.{{ entity_name }}
            {
{{~ for column in columns ~}}
                {{~ if column.name != "id" and column.name != "created_at" and column.name != "updated_at" ~}}
                {{ column.name | string.pascalcase }} = {{ column.name | string.pascalcase }},
                {{~ end ~}}
{{~ end ~}}
            };
        }
    }
    public class Update{{ entity_name }}Request
    {
        [JsonProperty("id")]
        public int Id { get; set; }
{{~ for column in columns ~}}
        {{~ if column.name != "id" and column.name != "created_at" ~}}
        [JsonProperty("{{ column.name }}")]
        public {{ 
            if column.is_nullable and (column.type != "string") 
                column.type | map_type | append "?"
            else 
                column.type | map_type 
        }} {{ column.name | string.pascalcase }} { get; set; }
        {{~ end ~}}
{{~ end ~}}
        internal Domain.Entities.{{ entity_name }} ToDomain()
        {
            return new Domain.Entities.{{ entity_name }}
            {
                Id = Id,
{{~ for column in columns ~}}
                {{~ if column.name != "id" and column.name != "created_at" ~}}
                {{ column.name | string.pascalcase }} = {{ column.name | string.pascalcase }},
                {{~ end ~}}
{{~ end ~}}
            };
        }
    }
}