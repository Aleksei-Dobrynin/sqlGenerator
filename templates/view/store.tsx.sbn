import { makeObservable, runInAction, observable } from "mobx";
import i18n from "i18next";
import dayjs from "dayjs";

import MainStore from "MainStore";
import BaseStore from 'core/stores/BaseStore';
import { validate, validateField } from "./valid";
{{~ for column in columns ~}}
  {{~ if column.foreign_key ~}}
import { get{{ column.foreign_key.table | pluralize | to_pascal_case }} } from "api/{{ column.foreign_key.table | to_pascal_case }}";
  {{~ end ~}}
{{~ end ~}}
import { get{{ entity_name }}, create{{ entity_name }}, update{{ entity_name }} } from "api/{{ entity_name }}";

interface {{ entity_name }}Response {
  id: number;
}

class {{ entity_name }}Store extends BaseStore {
  {{~ for column in columns ~}}
  {{~ if column.name != 'id' && column.name != 'created_at' && column.name != 'updated_at' && column.name != 'created_by' && column.name != 'updated_by' ~}}
  @observable {{ column.name   }}: {{ column.type   }} = {{ column.default_value   }};
  {{~ end ~}}
  {{~ end ~}}

  // Справочники
  {{~ for column in columns ~}}
  {{~ if column.foreign_key ~}}
  @observable {{ column.foreign_key.table | pluralize   }} = [];
  {{~ end ~}}
  {{~ end ~}}

  constructor() {
    super();
    makeObservable(this);
  }

  clearStore() {
    super.clearStore();
    runInAction(() => {
      {{~ for column in columns ~}}
      {{~ if column.name != 'id' && column.name != 'created_at' && column.name != 'updated_at' && column.name != 'created_by' && column.name != 'updated_by' ~}}
      this.{{ column.name   }} = {{ column.default_value   }};
      {{~ end ~}}
      {{~ end ~}}
    });
  }

  async validateField(name: string, value: any) {
    const { isValid, error } = await validateField(name, value);
    runInAction(() => {
      if (isValid) {
        this.errors[name] = ""; 
      } else {
        this.errors[name] = error;
      }
    });
  }

  async onSaveClick(onSaved: (id: number) => void) {
    const data = {
      {{~ for column in columns ~}}
      {{~ if column.name != 'created_at' && column.name != 'updated_at' && column.name != 'created_by' && column.name != 'updated_by' ~}}
      {{ column.name   }}: this.{{ column.name   }},
      {{~ end ~}}
      {{~ end ~}}
    };

    const { isValid, errors } = await validate(data);
    if (!isValid) {
      runInAction(() => this.errors = errors);
      MainStore.openErrorDialog(i18n.t("message:error.alertMessageAlert"));
      return;
    }

    const apiMethod = data.id ? 
      () => update{{ entity_name }}(data) : 
      () => create{{ entity_name }}(data);

    this.apiCall(
      apiMethod,
      (response: {{ entity_name }}Response) => {
        if (!data.id) {
          runInAction(() => this.id = response.id);
          this.showSuccessSnackbar(i18n.t("message:snackbar.successSave"));
        } else {
          this.showSuccessSnackbar(i18n.t("message:snackbar.successEdit"));
        }
        onSaved(response.id || this.id);
      }
    );
  };

  async doLoad(id: number) {
    {{~ for column in columns ~}}
    {{~ if column.foreign_key ~}}
    await this.load{{ column.foreign_key.table | pluralize | to_pascal_case }}();
    {{~ end ~}}
    {{~ end ~}}

    if (id) {
      await this.load{{ entity_name }}(id);
    }
  }

  {{~ for column in columns ~}}
  {{~ if column.foreign_key ~}}
  load{{ column.foreign_key.table | pluralize | to_pascal_case }} = async () => {
    try {
      MainStore.changeLoader(true);
      const response = await get{{ column.foreign_key.table | pluralize | to_pascal_case }}();
      if (response.status === 200 && response.data) {
        runInAction(() => {
          this.{{ column.foreign_key.table | pluralize   }} = response.data;
        });
      }
    } catch (err) {
      MainStore.setSnackbar(i18n.t("message:somethingWentWrong"), "error");
    } finally {
      MainStore.changeLoader(false);
    }
  };
  {{~ end ~}}
  {{~ end ~}}

  load{{ entity_name }} = async (id: number) => {
    this.apiCall(
      () => get{{ entity_name }}(id),
      (data) => {
        runInAction(() => {
          {{~ for column in columns ~}}
          {{~ if column.name != 'created_at' && column.name != 'updated_at' && column.name != 'created_by' && column.name != 'updated_by' ~}}
          this.{{ column.name   }} = data.{{ column.name   }};
          {{~ end ~}}
          {{~ end ~}}
        });
      }
    );
  };
}

export default new {{ entity_name }}Store();