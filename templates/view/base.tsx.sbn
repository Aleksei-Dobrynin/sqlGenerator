import React, { FC } from "react";
import {
  Card,
  CardContent,
  CardHeader,
  Divider,
  Paper,
  Grid,
  Container
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import store from "./store";
import { observer } from "mobx-react";
import LookUp from 'components/LookUp';
import CustomTextField from "components/TextField";
import DateTimeField from "components/DateTimeField";

type {{ entity_name }}Props = {
  children?: React.ReactNode;
  isPopup?: boolean;
};

const Base{{ entity_name }}View: FC<{{ entity_name }}Props> = observer((props) => {
  const { t } = useTranslation();
  const translate = t;

  return (
    <Container maxWidth='xl' sx={{ mt: 3 }}>
      <Grid container spacing={3}>
        <Grid item md={props.isPopup ? 12 : 6}>
          <form data-testid="{{ table_name }}Form" id="{{ table_name  }}Form" autoComplete='off'>
            <Card component={Paper} elevation={5}>
              <CardHeader title={
                <span id="{{ table_name  }}_TitleName">
                  {translate('label:{{ table_name  }}AddEditView.entityTitle')}
                </span>
              } />
              <Divider />
              <CardContent>
                <Grid container spacing={3}>
                  {{~ for column in columns ~}}
                  {{~ if column.name != 'id' && column.name != 'created_at' && column.name != 'updated_at' && column.name != 'created_by' && column.name != 'updated_by' ~}}
                  {{~ if column.foreign_key ~}}
                  <Grid item md={12} xs={12}>
                    <LookUp
                      value={store.{{ column.name | replace '_id' ''   }}Id}
                      onChange={(event) => store.handleChange(event)}
                      name="{{ column.name   }}"
                      data={store.{{ column.foreign_key.table | pluralize   }}}
                      id='id_f_{{ table_name  }}_{{ column.name   }}'
                      label={translate('label:{{ table_name  }}AddEditView.{{ column.name   }}')}
                      helperText={store.errors.{{ column.name   }}}
                      error={!!store.errors.{{ column.name   }}}
                    />
                  </Grid>
                  {{~ else ~}}
                  <Grid item md={12} xs={12}>
                    {{~ if column.type == 'timestamp' ~}}
                    <DateTimeField
                      value={store.{{ column.name   }}}
                      onChange={(date) => store.handleDateChange(date, '{{ column.name   }}')}
                      name="{{ column.name   }}"
                      id='id_f_{{ table_name  }}_{{ column.name   }}'
                      label={translate('label:{{ table_name  }}AddEditView.{{ column.name   }}')}
                      helperText={store.errors.{{ column.name   }}}
                      error={!!store.errors.{{ column.name   }}}
                    />
                    {{~ else ~}}
                    <CustomTextField
                      value={store.{{ column.name   }}}
                      onChange={(event) => store.handleChange(event)}
                      name="{{ column.name   }}"
                      data-testid="id_f_{{ table_name  }}_{{ column.name   }}"
                      id='id_f_{{ table_name  }}_{{ column.name   }}'
                      label={translate('label:{{ table_name  }}AddEditView.{{ column.name   }}')}
                      helperText={store.errors.{{ column.name   }}}
                      error={!!store.errors.{{ column.name   }}}
                    />
                    {{~ end ~}}
                  </Grid>
                  {{~ end ~}}
                  {{~ end ~}}
                  {{~ end ~}}
                </Grid>
              </CardContent>
            </Card>
          </form>
        </Grid>
        {props.children}
      </Grid>
    </Container>
  );
});

export default Base{{ entity_name }}View;